---
  - name: Installing RemoteDAQ Server
    hosts: localhost
    connection: local
    become: true
    vars_prompt:

    - name: zt_net_id
      prompt: Insert ZeroTier Network ID
      private: false

    - name: zt_token
      prompt: Insert Generated ZeroTier Token (The input is hidden)

    - name: db_user
      prompt: Insert Username used for InfluxDB
      private: false

    - name: db_pass
      prompt: Insert Password used for InfluxDB (The input is hidden)

    - name: db_org
      prompt: Insert InfluxDB Organization Name
      private: false

    - name: db_bucket
      prompt: Insert InfluxDB Bucket Name
      private: false

    tasks:

    # Install Docker
    - name: Install Required System Packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - python3-pip
          - openssh-client
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        filename: docker.list
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Update apt and Install docker-ce
      apt:
        name:
          - docker-ce
          - docker-compose
        state: latest
        update_cache: true

    - name: Install Docker Module for Python
      pip:
        name:
          - docker
          - PyYAML

    # Install ZeroTier Client
    - name: Get ZeroTier Client Install Script
      uri:
        url: https://install.zerotier.com
        method: GET
        dest: ./zerotier-install.sh
        mode: u+rwx

    - name: Install ZeroTier Client
      command: ./zerotier-install.sh

    # Join Zerotier Network
    - name: Connect to ZeroTier Network
      command: zerotier-cli join '{{ zt_net_id }}'

    # Get ZeroTier ID
    - name: Get ZeroTier ID
      shell: zerotier-cli info | cut -d ' ' -f 3
      register: zt_id

    # Authorize Server to ZeroTier
    - name: Authorize This Server to ZeroTier
      uri:
        url: https://api.zerotier.com/api/v1/network/{{ zt_net_id }}/member/{{ zt_id.stdout }}
        method: POST
        headers:
          Authorization: Bearer {{ zt_token }}
        body_format: json
        body: {
            "config": {
                "authorized": true
            }
        }

    # Get Server IP Address
    - name: Get Server IP Address
      shell: hostname -I | cut -d ' ' -f 2
      register: db_ip

    # Create .env File
    - name: Creating .env File
      copy:
        dest: ./.env
        content: |
          ZT_ID={{ zt_id.stdout }}
          ZT_NET_ID={{ zt_net_id }}
          ZT_TOKEN={{ zt_token }}
          DB_IP=http://{{ db_ip }}:8086
          DB_ORG={{ db_org }}
          DB_BUCKET={{ db_bucket }}

    # Start Docker Service
    - name: Starting Docker Service
      service:
        name: docker
        state: started

    # Create Volume for InfluxDB Container
    - name: Create InfluxDB Config Storage
      docker_volume:
        name: influxdb-config

    - name: Create InfluxDB Persistent Storage
      docker_volume:
        name: influxdb-data

    # Copy Project Files
    - name: Copy Project Files to tmp Directory
      copy:
        src: .
        dest: /tmp/RemoteDAQ-Server

    # Deploy RemoteDAQ Server
    - name: Deploy Container
      docker_compose:
        project_src: /tmp/RemoteDAQ-Server
        restarted: true

    # Wait Until Container Ready
    - name: Wait Until InfluxDB Ready
      wait_for:
        host: 0.0.0.0
        port: 8086

    # Configure InfluxDB
    - name: Configure InfluxDB
      command: docker exec remotedaq_db influx setup --username {{ db_user }} --password {{ db_pass }} --org {{ db_org }} --bucket {{ db_bucket }} --force

    # Get InfluxDB Token
    - name: Get InfluxDB Token
      shell: docker exec remotedaq_db influx auth list --user {{ db_user }} --hide-headers | cut -f 3
      register: db_token

    # Append .env File
    - name: Append InfluxDB Token to .env File
      lineinfile:
        path: ./.env
        insertafter: EOF
        line: DB_TOKEN={{ db_token.stdout }}
        state: present

    # Restart Containers
    - name: Restart Containers
      docker_compose:
        project_src: /tmp/RemoteDAQ-Server
        build: false
        restarted: true

